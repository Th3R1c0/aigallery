import type { NextPage, InferGetServerSidePropsType } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import type { Art, NewArt } from "../../db/drizzleDB";
import { useEffect, useRef, useState } from "react";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "~/server/api/root";
import superjson from "superjson";
import Image from "next/image";

const Home: NextPage = () => {
  const [currentImages, setCurrent] = useState<Art[]>([]);
  const [refetchNum] = useState<number>(6);
  const [index, setIndex] = useState<number>(0);
  const [fadeIn, fadeOut] = useState<boolean>(true);
  const reff = useRef<HTMLDivElement>(null);
  const submit = api.images.SubmitImageRank.useMutation();
  const [title, setTitle] = useState<string>("most expensive");
  const { data, isLoading, refetch } = api.images.getImagePair.useQuery(
    {
      number: refetchNum,
    },
    {
      onSuccess: (data: Art[]) => {
        if (index + 4 > currentImages.length) {
          setCurrent((curr: Art[]) => [...curr, ...data]);
        }
      },
    }
  );

  const toggleAnimation = () => {
    fadeOut(false);
    console.log(reff.current);
  };

  const handleClick = async (img: Art): Promise<void> => {
    const otherImage = currentImages[index + 1]?.image;
    if (otherImage) {
      submit.mutate({
        pickedImage: img.image,
        otherImage,
      });
    }
    const randomtitle = ["most expensive", "most dangerous", "most stylish"][
      Math.floor(Math.random() * 3)
    ] as string;
    setTitle(randomtitle);
    toggleAnimation();
    setIndex(index + 2);

    const res = await refetch();
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-full w-full flex-col items-center">
        <div className="bg-gradient-to-r from-purple-400 to-pink-600 bg-clip-text pb-8 text-8xl font-extrabold text-transparent">
          AI GALLERY RANKING
        </div>

        <div className={` text-6xl font-bold`}>{title}:</div>

        <div className=" flex space-x-8 p-8">
          {/* {props.data.map((image) => {
            return (
              <div key={image.image} className="h-1/2 w-1/2">
                <img src={image.image} alt="something" />
              </div>
            );
          })}{" "} */}
          {currentImages.length > 0 ? (
            [currentImages[index], currentImages[index + 1]].map((img) => {
              return (
                <div
                  ref={reff}
                  key={img?.image}
                  className={`${
                    fadeIn ? "opacity-100" : "opacity-0"
                  } transition-opacity duration-500`}
                  onClick={() => void handleClick(img as Art)}
                >
                  <Image
                    onLoadingComplete={() => fadeOut(true)}
                    src={img?.image as string}
                    height={200}
                    quality={100}
                    width={200}
                    alt="something"
                    unoptimized
                    className="h-[50rem] w-[50rem] rounded-lg border-blue-200 hover:border-2"
                  />
                </div>
              );
            })
          ) : (
            <div>loading</div>
          )}
        </div>
        <Link href="/rankings" className=" rounded-md bg-blue-900 p-4 text-4xl">
          <div className={`font-bold`}>See Rankings</div>
        </Link>
      </main>
    </>
  );
};

export async function getServerSideProps() {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: {},
    transformer: superjson, // optional - adds superjson serialization
  });

  await helpers.images.getImagePair.prefetch({ number: 4 });
  return {
    props: {
      trpcState: helpers.dehydrate(),
    },
  };
}

export default Home;
